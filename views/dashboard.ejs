<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>V0 Dashboard</title>
  <style>
    body {
      background-color: #0a0a0a;
      color: #ffd700;
      font-family: 'Segoe UI', sans-serif;
      margin: 0;
      padding: 0;
      display: flex;
      height: 100vh;
      overflow: hidden;
    }

    /* Sidebar */
    .sidebar {
      width: 240px;
      background-color: #111;
      color: #ffd700;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      padding-top: 40px;
      box-shadow: 2px 0 8px rgba(0, 0, 0, 0.5);
    }

    .sidebar h2 {
      font-size: 20px;
      text-align: center;
      width: 100%;
      margin-bottom: 30px;
    }

    .sidebar button {
      background: none;
      border: none;
      color: #ffd700;
      font-size: 16px;
      margin: 10px 0;
      cursor: pointer;
      transition: color 0.2s;
      width: 100%;
      padding: 10px;
      text-align: left;
      padding-left: 30px;
    }

    .sidebar button:hover,
    .sidebar button.active {
      color: #fff;
      background-color: #222;
    }

    .sidebar .channel-list {
      width: 100%;
      margin-top: -5px;
      margin-bottom: 15px;
    }

    .sidebar .channel-btn {
      background: none;
      border: none;
      color: #aaa;
      font-size: 13px;
      text-align: left;
      width: 100%;
      padding: 6px 0 6px 45px;
      cursor: pointer;
    }

    .sidebar .channel-btn:hover,
    .sidebar .channel-btn.active {
      background-color: #1a1a1a;
      color: #ffd700;
    }

    .logout {
      color: #888;
      text-decoration: none;
      display: block;
      text-align: center;
      margin-top: auto;
      width: 100%;
      padding: 15px 0;
    }

    /* Main content */
    .content {
      flex: 1;
      padding: 30px;
      overflow-y: auto;
    }

    .container {
      max-width: 800px;
      margin: auto;
      background-color: #111;
      padding: 30px;
      border-radius: 15px;
      box-shadow: 0 0 20px #222;
    }

    h1 {
      text-align: center;
      margin-bottom: 25px;
    }

    input, textarea, select {
      width: 90%;
      margin: 10px;
      padding: 8px;
      border: none;
      border-radius: 5px;
      background-color: #1a1a1a;
      color: #ffd700;
    }

    input[type="color"] {
      width: 60px;
      height: 40px;
      padding: 0;
      border: none;
      cursor: pointer;
    }

    button {
      background-color: #ffd700;
      color: #000;
      padding: 10px 20px;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: bold;
    }

    button:hover { background-color: #e5c100; }

    .success {
      background-color: #16a34a;
      color: white;
      padding: 8px;
      border-radius: 5px;
      margin-bottom: 10px;
      text-align: center;
    }

    .pair {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
      margin-bottom: 10px;
    }

    .pair input, .pair select { width: auto; flex: 1; }

    #reaction-pairs { margin-top: 10px; }

    /* Reaction Role List */
    .reaction-list { margin-top: 20px; background:#1a1a1a; border-radius:10px; padding:15px; }
    .reaction-item { border-bottom:1px solid #333; padding:10px 0; }
    .reaction-item:last-child{ border-bottom:none; }
    .channel-name { color:#ffd700; font-weight:bold; margin-top:15px; }
    .edit-form input, .edit-form textarea, .edit-form select { width:95%; }
    .delete-btn { background:#ff4d4d; color:#fff; margin-top:5px; }
  </style>
</head>
<body>

  <!-- Sidebar -->
  <div class="sidebar">
    <h2>üíé V0</h2>
    <button id="tab-embed" class="active">üìã Embed Builder</button>
    <button id="tab-reaction">üé≠ Reaction Roles</button>

    <!-- Dynamische Channel-Liste (anklickbar) -->
    <div class="channel-list">
      <% 
      const channelNames = [];
      Object.values(rrData).forEach(r => {
        if (!channelNames.includes(r.channelName)) channelNames.push(r.channelName);
      });
      channelNames.forEach(name => { %>
        <button class="channel-btn" data-channel="<%= name %>"># <%= name %></button>
      <% }); %>
    </div>

    <a href="/logout" class="logout">Logout</a>
  </div>

  <!-- Main content -->
  <div class="content">

    <!-- Embed Builder -->
    <div id="embed-tab" class="container tab active">
      <h1>üìã Embed Builder</h1>
      <% if (message) { %>
        <div class="success"><%= message %></div>
      <% } %>
      <form action="/send" method="POST">
        <select name="channelId" required>
          <option value="">Select Channel</option>
          <% channels.forEach(ch => { %>
            <option value="<%= ch.id %>">#<%= ch.name %></option>
          <% }) %>
        </select><br>

        <input type="text" name="title" id="title" placeholder="Embed Title" /><br>
        <textarea name="description" id="description" rows="5" placeholder="Embed Description"></textarea><br>

        <label for="color">üé® Pick a color:</label><br>
        <input type="color" name="color" id="color" value="#FFD700"><br>

        <label>
          <input type="checkbox" name="restock"> üîî Ping Restock Role
        </label><br><br>

        <input type="text" name="footer" id="footer" placeholder="Footer Text" /><br>
        <button type="submit">Send Embed</button>
      </form>
    </div>

    <!-- Reaction Role Creator -->
    <div id="reaction-tab" class="container tab" style="display:none;">
      <h1>üé≠ Reaction Roles</h1>
      <form action="/reactionrole" method="POST">
        <select name="channelId" required>
          <option value="">Select Channel</option>
          <% channels.forEach(ch => { %>
            <option value="<%= ch.id %>">#<%= ch.name %></option>
          <% }) %>
        </select><br>

        <input type="text" name="title" placeholder="Embed Title" /><br>
        <textarea name="description" rows="5" placeholder="Embed Description"></textarea><br>
        <label for="color">üé® Pick a color:</label><br>
        <input type="color" name="color" value="#FFD700"><br>
        <input type="text" name="footer" placeholder="Footer Text" /><br>

        <h3>üß© Emoji ‚Üí Role Pairs</h3>
        <div id="reaction-pairs"></div>
        <button type="button" id="add-pair">+ Add Pair</button><br><br>
        <button type="submit">Send Reaction Role Message</button>
      </form>
    </div>

    <!-- Channel-specific Reaction Role Editors -->
    <% 
    const grouped = {};
    Object.entries(rrData).forEach(([msgId, data]) => {
      if (!grouped[data.channelName]) grouped[data.channelName] = [];
      grouped[data.channelName].push({ id: msgId, ...data });
    });
    Object.entries(grouped).forEach(([channel, embeds]) => { %>
      <div id="tab-<%= channel %>" class="container tab" style="display:none;">
        <h1>üí¨ #<%= channel %></h1>
        <div class="reaction-list">
          <% embeds.forEach(e => { %>
            <div class="reaction-item">
              <form class="edit-form" action="/reactionrole/update" method="POST">
                <input type="hidden" name="messageId" value="<%= e.id %>" />
                <label>Title</label>
                <input type="text" name="title" value="<%= e.embed.title || '' %>" />

                <label>Description</label>
                <textarea name="description" rows="2"><%= e.embed.description || '' %></textarea>

                <label>Color</label>
                <input type="color" name="color" value="<%= e.embed.color || '#FFD700' %>" />

                <label>Footer</label>
                <input type="text" name="footer" value="<%= e.embed.footer || '' %>" />

                <label>Emoji‚ÄìRole Pairs</label>
                <% e.pairs.forEach((p, i) => { %>
                  <div class="pair">
                    <input type="text" name="emoji_<%= i+1 %>" value="<%= p.emoji %>" />
                    <select name="role_<%= i+1 %>">
                      <% roles.forEach(r => { %>
                        <option value="<%= r.id %>" <%= r.id === p.roleId ? 'selected' : '' %>><%= r.name %></option>
                      <% }) %>
                    </select>
                    <button type="button" onclick="this.parentElement.remove()">‚ùå</button>
                  </div>
                <% }) %>
                <button type="submit">üíæ Update</button>
              </form>
              <form action="/reactionrole/delete" method="POST">
                <input type="hidden" name="messageId" value="<%= e.id %>" />
                <button type="submit" class="delete-btn">üóëÔ∏è Delete</button>
              </form>
            </div>
          <% }) %>
        </div>
      </div>
    <% }) %>
  </div>

  <script>
    // === Tab Switching ===
    const embedTabBtn = document.getElementById('tab-embed');
    const reactionTabBtn = document.getElementById('tab-reaction');
    const tabs = document.querySelectorAll('.tab');
    const channelButtons = document.querySelectorAll('.channel-btn');

    function showTab(id) {
      tabs.forEach(tab => tab.style.display = 'none');
      document.getElementById(id).style.display = '';
    }

    embedTabBtn.addEventListener('click', () => {
      showTab('embed-tab');
      embedTabBtn.classList.add('active');
      reactionTabBtn.classList.remove('active');
      channelButtons.forEach(btn => btn.classList.remove('active'));
    });

    reactionTabBtn.addEventListener('click', () => {
      showTab('reaction-tab');
      reactionTabBtn.classList.add('active');
      embedTabBtn.classList.remove('active');
      channelButtons.forEach(btn => btn.classList.remove('active'));
    });

    channelButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const channel = btn.dataset.channel;
        showTab(`tab-${channel}`);
        channelButtons.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        embedTabBtn.classList.remove('active');
        reactionTabBtn.classList.remove('active');
      });
    });

    // === Reaction Role Pair Adder ===
    const pairsDiv = document.getElementById('reaction-pairs');
    const addPairBtn = document.getElementById('add-pair');
    let pairIndex = 1;
    addPairBtn.addEventListener('click', () => {
      const div = document.createElement('div');
      div.className = 'pair';
      div.innerHTML = `
        <input type="text" name="emoji_${pairIndex}" placeholder="Emoji (üíé)" required>
        <select name="role_${pairIndex}" required>
          <option value="">Select Role</option>
          <% roles.forEach(r => { %>
            <option value="<%= r.id %>"><%= r.name %></option>
          <% }) %>
        </select>
        <button type="button" onclick="this.parentElement.remove()">‚ùå</button>
      `;
      pairsDiv.appendChild(div);
      pairIndex++;
    });
  </script>
</body>
</html>
